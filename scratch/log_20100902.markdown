
## Current description of the project

I want a 'reply' type twitter bot that answers certain questions about my YourMailingListProvider account.  (YourMailingListProvider.com is a bulk emailer for newsletters etc. similar in concept to Constant Contact, but a little simpler to use.  It has a basic token-based API, not complicated, returns xml or json).

The first question I want to ask, to start simply, is: _has this email address unsubscribed from my list?_

## Technical considerations

As I see it there are three basic parts:

1. The 'input parser' which gets direct messages and parses them as commands;
2. The 'data store client' which runs the commands as http requests to YMLP;
3. The 'output generator' which formats the responses from YMLP and replies to the twitter user who sent the command

One very basic question for the input pieces is what is the mechanism for reading the commands (direct messages)?  I do not want to poll if at all possible: I want to act on push notifications.  For one thing, Twitter has strict limits on polling.  This suggested to me looking at the Streaming API.

Apparently the ability to receive push notifications for Direct Messages is in beta right now, see [here](http://thenextweb.com/socialmedia/2010/08/30/twitter-launches-site-streams-to-eliminate-rate-limits-for-tweets-about-you/)

There is a very nice basic ruby EventMachine library for consuming Twitter streams (twitter-stream),  hopefully it will be compatible with the new stuff.

OK - so assuming that's sufficient for the 'input' side of things, what about the 'data store' (YMLP) and the 'output' (reply tweet)?

Staying within Twitterland for the moment, the reply would be handled using the standard REST API (`/1/direct_messages/new.json`).  Hopefully using a simple EM http client + oauth.

Probably you'd have a queue within the EM for the _parsed incoming commands_. A subscriber proc then pulls off commands, converts them to http requests to YMLP, and listens for a response.

The responses also would be placed on an 'outbound' queue.

The trick is how to retain a certain amount of state - for instance you need to know in the outbound queue who to reply to, which is determined by data in the input.


## The YMLP interface

